type Player {
  playerId: Int!
  playerName: String!
  playerPosition: String
  lineupPosition: String
  nflTeam: String
  nflTeamAbbrev: String
  nflTeamOpp: String
  nflTeamOppAbbrev: String
  projectedPoints: Float
  realPoints: Float
}

type TeamStats {
  prevTeamStats: [TeamStats]
  scoringPeriodId: Int!
  id: ID!
  teamName: String
  teamAbbrev: String
  logoUrl: String
  pointsFor: Float
  pointsAgainst: Float
  projectedPointsFor: Float
  projectedPointsAgainst: Float
  benchPointsFor: Float
  benchPointAgainst: Float
  projectedBenchPointsFor: Float
  projectedBenchPointsAgainst: Float
  optimalPoints: Float
  scoringDifferential: Float
  last3AvgFor: Float
  last3AvgOptimal: Float
  seasonAvgFor: Float
  seasonHighFor: Float
  seasonLowFor: Float
  seasonAvgOptimal: Float
  seasonHighOptimal: Float
  seasonLowOptimal: Float
  totalFor: Float
  totalAgainst: Float
  totalBench: Float
  totalOptimal: Float
  totalDifferential: Float
  seasonStdDevPF: Float
  efficiency: Float
  totalEfficiency: Float
  totalCoachRating: Float,
}

type LeagueStats {
  id: ID
  teamName: String
  teamAbbrev: String
  logoUrl: String
  teamStats: [TeamStats!]
}

type TeamOwner {
  firstName: String
  lastName: String
  id: ID!
}

type TeamStanding {
  id: Int
  teamName: String
  teamAbbrev: String
  owners: [TeamOwner]
  divisionName: String
  wins: Int
  losses: Int
  streakLength: Int
  streakType: String
  pointsFor: Float
  pointsAgainst: Float
  divisionStanding: Int
  overallStanding: Int
}

type Query {
  standings: [TeamStanding]
  teamStats(id: ID!): [TeamStats!]
  leagueStats: [LeagueStats!]
}
